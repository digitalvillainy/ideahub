<?php
/* Generated by neoan3-cli */

namespace Neoan3\Components;

use Neoan3\Apps\Stateless;
use Neoan3\Core\RouteException;
use Neoan3\Core\Unicore;
use Neoan3\Frame\Ideahub;
use Neoan3\Model\UserModel;

/**
 * @method uni(string $string)
 */
class Register extends unicore {
    /**
     * @var array
     */
    private $components = ['register'];
    function __construct() {
        new Ideahub();
    }

    /**
     *
     */
    function init(){
        $this->uni('ideahub')
             ->callback($this,'setup')
             ->hook('main','register')
             ->output();
    }

    /**
     * @param $frame
     */
    function setup($frame){
        foreach ($this->components as $component){
            $frame->vueComponent($component);
        }
    }
    /**
     * @param $newUser
     *
     * @return array
     * @throws \Neoan3\Apps\DbException
     * @throws RouteException
     */
    function postRegister($newUser){
        if(!isset($newUser['email']) || !isset($newUser['password'])){
            throw new RouteException('missing values', 401);
        }

        $existingUser = UserModel::find(['email'=>$newUser['email']]);
        if(!empty($existingUser)){
            throw new RouteException('already registered', 403);
        }
        $registeredUser = UserModel::register($newUser['email'],$newUser['password'], $newUser['username'],true);
        return ['registration'=>'successful'];
    }

    /**
     * @return array
     * @throws RouteException
     * @throws \Neoan3\Apps\DbException
     */
    function getRegister(){
        $jwt = Stateless::validate();
        return UserModel::byId($jwt['jti']);
    }

}
