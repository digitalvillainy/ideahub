<?php
/* Generated by neoan3-cli */

namespace Neoan3\Components;

use Neoan3\Apps\Db;
use Neoan3\Apps\Ops;
use Neoan3\Apps\Stateless;
use Neoan3\Core\RouteException;
use Neoan3\Frame\Ideahub;
use Neoan3\Model\UserModel;
use Neoan3\Apps\CryptoJsAes;


/**
 * Class Login
 * @package Neoan3\Components
 */
class Login extends Ideahub {
    private $input = [];

    /**
     * @param $credentials
     *
     * @return array
     * @throws \Neoan3\Apps\DbException
     * @throws RouteException
     * @throws \Exception
     */
    function postLogin($credentials) {
        // TODO: Need explanation about CryptoJsAes
        $this->input['email'] = CryptoJsAes::cryptoJsAesDecrypt('tunnel', $credentials[0]['email']);
        $this->input['password'] = CryptoJsAes::cryptoJsAesDecrypt('tunnel', $credentials[1]['password']);
        if (!isset($this->input['email']) || !isset($this->input['password'])) {
            throw new RouteException('missing values', 401);
        }

        $existingUser = UserModel::find(['email' => $this->input['email']]);
        if (empty($existingUser)) {
            throw new RouteException('unauthorized email', 401);
        }
        $foundUser = $existingUser[0];
        $password = Db::easy('user_password.password', ['user_password.id' => '$' . $foundUser['id']]);
        if (empty($password)) {
            throw new RouteException('unauthorized password', 401);
        }
        if (Ops::decrypt($password[0]['password'], $this->input['password']) == $this->input['password']) {
            $jwt = Stateless::assign($foundUser['id'], 'user');
            return ['token' => $jwt];
        }
        throw new RouteException('unauthorized overall', 401);
    }

}
